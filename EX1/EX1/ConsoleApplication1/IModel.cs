using MazeLib;
using SearchAlgorithmsLib;
using System.Collections.Generic;
using System.Net.Sockets;

/// <summary>
/// inteface Imodel include the basics methods 
/// </summary>
namespace Server

    public interface IModel
    {
        /// <summary>
        /// Generates the maze.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="rows">The rows.</param>
        /// <param name="cols">The cols.</param>

        Maze GenerateMaze(string name, int rows, int cols);
        /// <summary>
        /// Solves the maze.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="algorithem">The algorithem.</param>
        /// <returns></returns>

        Solution<Position> SolveMaze(string name, int algorithem);
        /// <summary>
        /// Adds the maze.
        /// </summary>
        /// <param name="maze">The maze.</param>
        /// 
        void AddMaze(Maze maze);
        /// <summary>
        /// Adds the game.
        /// </summary>
        /// <param name="game">The game.</param>

        void AddGame(Game game);

        /// <summary>
        /// Gets the game list.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetGameList
        Dictionary<string,Game> GetGameList();
        /// <summary>
        /// Doeses the maze exist.
        /// </summary>

        bool doesMazeExist();

        /// <summary>
        /// Gets the evaluated nodes.
        /// </summary>

        int GetEvaluatedNodes();
        /// <summary>
        /// Removes the game.
        /// </summary>
        /// <param name="removeGame">The remove game.</param>

        void RemoveGame(string removeGame);
    }
}